//扩展
extension Int {
    var add: Int {return self + 100 }
    var sub: Int {return self - 10 }
    var mul: Int {return self * 5 }
    var div: Int {return self / 2 }
}
let addition = 30.add
print(addition)
let subtraction = 88.sub
print(subtraction)
let mix = 10.mul.div
print(mix)

//扩展构造器
struct sum {
    var num1 = 100, num2 = 200
}
struct diff {
    var no1 = 200, no2 = 100
}
struct mult {
    var a = sum()
    var b = diff()
}
extension mult {
    init(x: sum, y: diff) {
        _ = x.num1 + x.num2
        _ = y.no1 + y.no2
    }
}

let a = sum(num1: 100, num2: 300)
let b = diff(no1: 300, no2: 100)
let getMult = mult(x: a, y: b)
print("getMult sum\(getMult.a.num1,getMult.a.num2)")
print("getMult diff\(getMult.b.no1,getMult.b.no2)")


//构造方法
extension Int {
    func topics(summation: () -> ()) {
        for _ in 0..<self {
            summation()
        }
    }
}
3.topics {
    print("扩展模块内")
}
2.topics {
    print("类型转换模块内")
}

//可变实例方法
extension Double {
    mutating func square() {
        let pi = 3.14
        self = pi*self*self
    }
}
var Trial1 = 10.0
Trial1.square()
print("\(Trial1)")
var Trial2 = 2.0
Trial2.square()
print(Trial2)

//下标
extension Int {
    subscript( multtable1: Int) -> Int {
        var no_1 = 1
        var x = multtable1
        while x > 0 {
            no_1 *= 10
            x -= 1
        }
        return (self / no_1) % 10
    }
}
print(12[0])
print(1560[2])
print(2785325[4])


//嵌套类型
extension Int {
    enum calc
    {
        case add
        case sub
        case mult
        case div
        case any
    }
    var print: calc {
        switch self {
        case 0:
            return .add
        case 1:
            return .sub
        case 2:
            return .mult
        case 3:
            return .div
        default:
            return .any
        }
    }
}
func result(numb: [Int]) {
    for i in numb {
        switch i.print {
        case .add:
            print("+")
        case .sub:
            print("-")
        case .mult:
            print("*")
        case .div:
            print("/")
        case .any:
            print("other")
        }
    }
}

result(numb: [0,1,2,3,4,5,6])
