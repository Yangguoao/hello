//自动引用计数
import Cocoa
class people {
    let name: String
    init(name: String) {
        self.name = name
        print("\(name)开始初始化")
    }
    deinit {
        print("\(name)被析构")
    }
}
// 值会被自动初始化为nil，目前还不会引用到people类的实例
var reference1: people?
var reference2: people?
var reference3: people?

// 创建people类的新实例
reference1 = people(name: "Hello")

//赋值给其他两个变量，该实例又会多出两个强引用
reference2 = reference1
reference3 = reference1

//断开第一个强引用
reference1 = nil
//断开第二个强引用
reference2 = nil
//断开第三个强引用，并调用析构函数
reference3 = nil


//解决循环强引用

//弱引用
class Module {
    let name: String
    init(name: String) { self.name = name }
    var sub: SubModule?
    deinit { print("\(name) 主模块") }
}
class SubModule {
    let number: Int
    init(number: Int) { self.number = number }
    weak var topic: Module?
    deinit { print("子模块 topic 数为 \(number)")}
}
var toc: Module?
var list: SubModule?
toc = Module(name: "ABC")
list = SubModule(number: 5)
toc!.sub = list
list!.topic = toc

toc = nil
list = nil

//无主应用
class Student {
    let name: String
    var section: Marks?
    
    init(name: String) {
        self.name = name
    }
    
    deinit { print("\(name)") }
}
class Marks {
    let marks: Int
    unowned let stname: Student
    
    init(marks: Int, stname: Student) {
        self.marks = marks
        self.stname = stname
    }
    
    deinit { print("学生的分数为 \(marks)") }
}

var module: Student?
module = Student(name: "ARC")
module!.section = Marks(marks: 98, stname: module!)
module = nil


class HTMLElement {
    let name: String
    let text: String?
    lazy var asHTML: () -> String = {
        [unowned self] in
        if let text = self.text {
            return "<\(self.name)>\(text)</\(self.name)>"
        } else {
            return "<\(self.name) />"
        }
    }
    init(name: String, text: String? = nil) {
        self.name = name
        self.text = text
    }
    deinit {
        print("\(name) 被析构")
    }
}
//创建并打印HTMLElement实例
var paragraph: HTMLElement? = HTMLElement(name: "p", text: "hello, world")
print(paragraph!.asHTML())

// HTMLElement实例将会被销毁，并能看到它的析构函数打印出的消息
paragraph = nil
